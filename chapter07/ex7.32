#ifndef CP5_ex7_32_h
#define CP5_ex7_32_h

#include <iostream>
#include <vector>
#include <string>
using namespace std;

class Window_mgr
{
public:
	using ScreenIndex = std::vector<Screen> ::size_type;
	inline void clear(ScreenIndex);

private:
	vector<Screen> screens;
};

class Screen
{
	friend class Window_mgr;
public:
	using pos = std::string::size_type;

	Screen() = default;
	Screen(pos ht, pos wd) : height(ht), width(wd), contents(ht * wd, ' ') { }
	Screen(pos ht, pos wd, char c) : height(ht), width(wd), contents(ht * wd, c)
	{
	}

	char get() const { return contents[cursor]; }
	char get(pos r, pos c) const { return contents[r * width + c]; }
	inline Screen& move(pos r, pos c);
	inline Screen& set(char c);
	inline Screen& set(pos r, pos c, char ch);

	const Screen& display(ostream& os) const
	{
		do_display(os);
		return *this;
	}
	Screen& display(ostream& os)
	{
		do_display(os);
		return *this;
	}

private:
	void do_display(std::ostream& os) const 
	{ 
		os << contents; 
	}
	pos cursor = 0;
	pos height = 0, width = 0;
	string contents;
};

inline void Window_mgr::clear(ScreenIndex i)
{
	if (i >= screens.size())
		return;
	Screen &s = screens[i];
	s.contents = string(s.height*s.width, ' ');
}

inline Screen& Screen::move(pos r, pos c)
{
	pos row = r*width + c;
	return *this;
}

inline Screen& Screen::set(char c)
{
	contents[cursor] = c;
	return *this;
}

inline Screen& Screen::set(pos r, pos c, char ch)
{
	contents[r*width + c] = ch;
	return *this;
}

#endif
