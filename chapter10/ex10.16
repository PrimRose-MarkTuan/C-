#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

void elimdups(vector<string>& vs)                        //排序并且删去重复的
{
	sort(vs.begin(), vs.end());
	auto new_end = unique(vs.begin(), vs.end());
	vs.erase(new_end, vs.end());
}

void biggies(vector<string>& vs, size_t sz)
{
	elimdups(vs);

	//! sort by size, but maintain alphabetical order for same size.
	stable_sort(vs.begin(), vs.end(), [](string const& lhs, string const& rhs) { return lhs.size() < rhs.size(); });  //按长度排序

	//! get an iterator to the first one whose size() is >= sz
	auto wc = find_if(vs.begin(), vs.end(),[sz](string const& s) { return s.size() >= sz; });

	//! print the biggies
	for_each(wc, vs.end(), [](const string& s) { cout << s << " "; });
}

int main()
{
	//! ex10.16
	vector<string> v{ "1234", "1234", "1234", "hi~", "alan", "alan", "cp" };
	biggies(v, 3);
	cout << endl;

	return 0;
}
